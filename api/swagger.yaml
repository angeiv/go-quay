openapi: 3.0.1
info:
  title: Quay Frontend
  description: This API allows you to perform many of the operations required to work
    with Quay repositories, users, and organizations. You can find out more at <a
    href="https://quay.io">Quay</a>.
  termsOfService: https://quay.io/tos
  contact:
    email: support@quay.io
  version: v1
servers:
- url: http://localhost/
tags:
- name: appspecifictokens
  description: Manages app specific tokens for the current user.
- name: build
  description: Create, list, cancel and get status/logs of repository builds.
- name: discovery
  description: API discovery information.
- name: error
  description: Error details API.
- name: globalmessages
  description: Messages API.
- name: image
  description: List and lookup repository images.
- name: logs
  description: Access usage logs for organizations or repositories.
- name: manifest
  description: Manage the manifests of a repository.
- name: mirror
- name: organization
  description: Manage organizations, members and OAuth applications.
- name: permission
  description: Manage repository permissions.
- name: prototype
  description: Manage default permissions added to repositories.
- name: repository
  description: List, create and manage repositories.
- name: repositorynotification
  description: List, create and manage repository events/notifications.
- name: repotoken
  description: Manage repository access tokens (DEPRECATED).
- name: robot
  description: Manage user and organization robot accounts.
- name: search
  description: Conduct searches against all registry context.
- name: secscan
  description: List and manage repository vulnerabilities and other security information.
- name: superuser
  description: Superuser API.
- name: tag
  description: Manage the tags of a repository.
- name: team
  description: Create, list and manage an organization's teams.
- name: trigger
  description: Create, list and manage build triggers.
- name: user
  description: Manage the current user.
- name: userfiles
paths:
  /api/v1/user/apptoken:
    get:
      tags:
      - appspecifictokens
      description: Lists the app specific tokens for the user.
      operationId: listAppTokens
      parameters:
      - name: expiring
        in: query
        description: If true, only returns those tokens expiring soon
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    post:
      tags:
      - appspecifictokens
      description: Create a new app specific token for user.
      operationId: createAppToken
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewToken'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.appspecifictokens.AppTokens
    x-tag: appspecifictokens
    x-path: /api/v1/user/apptoken
  /api/v1/user/apptoken/{token_uuid}:
    get:
      tags:
      - appspecifictokens
      description: Returns a specific app token for the user.
      operationId: getAppToken
      parameters:
      - name: token_uuid
        in: path
        description: The uuid of the app specific token
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    delete:
      tags:
      - appspecifictokens
      description: Revokes a specific app token for the user.
      operationId: revokeAppToken
      parameters:
      - name: token_uuid
        in: path
        description: The uuid of the app specific token
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    x-name: endpoints.api.appspecifictokens.AppToken
    x-path: /api/v1/user/apptoken/{token_uuid}
    x-tag: appspecifictokens
  /api/v1/repository/{repository}/build/:
    get:
      tags:
      - build
      description: Get the list of repository builds.
      operationId: getRepoBuilds
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: since
        in: query
        description: Returns all builds since the given unix timecode
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: limit
        in: query
        description: The maximum number of builds to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    post:
      tags:
      - build
      description: Request that a repository be built and pushed from the specified
        input.
      operationId: requestRepoBuild
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RepositoryBuildRequest'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      x-codegen-request-body-name: body
    x-name: endpoints.api.build.RepositoryBuildList
    x-path: /api/v1/repository/{repository}/build/
    x-tag: build
  /api/v1/repository/{repository}/build/{build_uuid}:
    get:
      tags:
      - build
      description: Returns information about a build.
      operationId: getRepoBuild
      parameters:
      - name: build_uuid
        in: path
        description: The UUID of the build
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    delete:
      tags:
      - build
      description: Cancels a repository build.
      operationId: cancelRepoBuild
      parameters:
      - name: build_uuid
        in: path
        description: The UUID of the build
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.build.RepositoryBuildResource
    x-path: /api/v1/repository/{repository}/build/{build_uuid}
    x-tag: build
  /api/v1/repository/{repository}/build/{build_uuid}/status:
    get:
      tags:
      - build
      description: Return the status for the builds specified by the build uuids.
      operationId: getRepoBuildStatus
      parameters:
      - name: build_uuid
        in: path
        description: The UUID of the build
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    x-name: endpoints.api.build.RepositoryBuildStatus
    x-tag: build
    x-path: /api/v1/repository/{repository}/build/{build_uuid}/status
  /api/v1/repository/{repository}/build/{build_uuid}/logs:
    get:
      tags:
      - build
      description: Return the build logs for the build specified by the build uuid.
      operationId: getRepoBuildLogs
      parameters:
      - name: build_uuid
        in: path
        description: The UUID of the build
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    x-name: endpoints.api.build.RepositoryBuildLogs
    x-tag: build
    x-path: /api/v1/repository/{repository}/build/{build_uuid}/logs
  /api/v1/discovery:
    get:
      tags:
      - discovery
      description: List all of the API endpoints available in the swagger API format.
      operationId: discovery
      parameters:
      - name: internal
        in: query
        description: Whether to include internal APIs.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
    x-name: endpoints.api.discovery.DiscoveryResource
    x-tag: discovery
    x-path: /api/v1/discovery
  /api/v1/error/{error_type}:
    get:
      tags:
      - error
      description: Get a detailed description of the error.
      operationId: getErrorDescription
      parameters:
      - name: error_type
        in: path
        description: The error code identifying the type of error.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiErrorDescription'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
    x-name: endpoints.api.error.Error
    x-tag: error
    x-path: /api/v1/error/{error_type}
  /api/v1/messages:
    get:
      tags:
      - globalmessages
      description: Return a super users messages.
      operationId: getGlobalMessages
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
      - globalmessages
      description: Create a message.
      operationId: createGlobalMessage
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateMessage'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
      x-codegen-request-body-name: body
    x-name: endpoints.api.globalmessages.GlobalUserMessages
    x-tag: globalmessages
    x-path: /api/v1/messages
  /api/v1/message/{uuid}:
    delete:
      tags:
      - globalmessages
      description: Delete a message.
      operationId: deleteGlobalMessage
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
    x-name: endpoints.api.globalmessages.GlobalUserMessage
    x-tag: globalmessages
    x-path: /api/v1/message/{uuid}
  /api/v1/repository/{repository}/image/{image_id}:
    get:
      tags:
      - image
      description: Get the information available for the specified image.
      operationId: getImage
      parameters:
      - name: image_id
        in: path
        description: The Docker image ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    x-name: endpoints.api.image.RepositoryImage
    x-tag: image
    x-path: /api/v1/repository/{repository}/image/{image_id}
  /api/v1/repository/{repository}/image/:
    get:
      tags:
      - image
      description: List the images for the specified repository.
      operationId: listRepositoryImages
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    x-name: endpoints.api.image.RepositoryImageList
    x-tag: image
    x-path: /api/v1/repository/{repository}/image/
  /api/v1/organization/{orgname}/aggregatelogs:
    get:
      tags:
      - logs
      description: Gets the aggregated logs for the specified organization.
      operationId: getAggregateOrgLogs
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: performer
        in: query
        description: Username for which to filter logs.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endtime
        in: query
        description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.logs.OrgAggregateLogs
    x-tag: logs
    x-path: /api/v1/organization/{orgname}/aggregatelogs
  /api/v1/user/exportlogs:
    post:
      tags:
      - logs
      description: Returns the aggregated logs for the current user.
      operationId: exportUserLogs
      parameters:
      - name: endtime
        in: query
        description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ExportLogs'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.logs.ExportUserLogs
    x-tag: logs
    x-path: /api/v1/user/exportlogs
  /api/v1/user/logs:
    get:
      tags:
      - logs
      description: List the logs for the current user.
      operationId: listUserLogs
      parameters:
      - name: next_page
        in: query
        description: The page token for the next page
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: performer
        in: query
        description: Username for which to filter logs.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endtime
        in: query
        description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    x-name: endpoints.api.logs.UserLogs
    x-tag: logs
    x-path: /api/v1/user/logs
  /api/v1/repository/{repository}/aggregatelogs:
    get:
      tags:
      - logs
      description: Returns the aggregated logs for the specified repository.
      operationId: getAggregateRepoLogs
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: endtime
        in: query
        description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.logs.RepositoryAggregateLogs
    x-tag: logs
    x-path: /api/v1/repository/{repository}/aggregatelogs
  /api/v1/organization/{orgname}/logs:
    get:
      tags:
      - logs
      description: List the logs for the specified organization.
      operationId: listOrgLogs
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: next_page
        in: query
        description: The page token for the next page
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: performer
        in: query
        description: Username for which to filter logs.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endtime
        in: query
        description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.logs.OrgLogs
    x-tag: logs
    x-path: /api/v1/organization/{orgname}/logs
  /api/v1/repository/{repository}/logs:
    get:
      tags:
      - logs
      description: List the logs for the specified repository.
      operationId: listRepoLogs
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: next_page
        in: query
        description: The page token for the next page
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endtime
        in: query
        description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.logs.RepositoryLogs
    x-tag: logs
    x-path: /api/v1/repository/{repository}/logs
  /api/v1/user/aggregatelogs:
    get:
      tags:
      - logs
      description: Returns the aggregated logs for the current user.
      operationId: getAggregateUserLogs
      parameters:
      - name: performer
        in: query
        description: Username for which to filter logs.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endtime
        in: query
        description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    x-name: endpoints.api.logs.UserAggregateLogs
    x-tag: logs
    x-path: /api/v1/user/aggregatelogs
  /api/v1/organization/{orgname}/exportlogs:
    post:
      tags:
      - logs
      description: Exports the logs for the specified organization.
      operationId: exportOrgLogs
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: endtime
        in: query
        description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ExportLogs'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.logs.ExportOrgLogs
    x-tag: logs
    x-path: /api/v1/organization/{orgname}/exportlogs
  /api/v1/repository/{repository}/exportlogs:
    post:
      tags:
      - logs
      description: Queues an export of the logs for the specified repository.
      operationId: exportRepoLogs
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: endtime
        in: query
        description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ExportLogs'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.logs.ExportRepositoryLogs
    x-tag: logs
    x-path: /api/v1/repository/{repository}/exportlogs
  /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}:
    get:
      tags:
      - manifest
      description: Retrieves the label with the specific ID under the manifest.
      operationId: getManifestLabel
      parameters:
      - name: labelid
        in: path
        description: The ID of the label
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: manifestref
        in: path
        description: The digest of the manifest
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    delete:
      tags:
      - manifest
      description: Deletes an existing label from a manifest.
      operationId: deleteManifestLabel
      parameters:
      - name: labelid
        in: path
        description: The ID of the label
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: manifestref
        in: path
        description: The digest of the manifest
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
    x-name: endpoints.api.manifest.ManageRepositoryManifestLabel
    x-path: /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}
    x-tag: manifest
  /api/v1/repository/{repository}/manifest/{manifestref}/labels:
    get:
      tags:
      - manifest
      operationId: listManifestLabels
      parameters:
      - name: manifestref
        in: path
        description: The digest of the manifest
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: filter
        in: query
        description: If specified, only labels matching the given prefix will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    post:
      tags:
      - manifest
      description: Adds a new label into the tag manifest.
      operationId: addManifestLabel
      parameters:
      - name: manifestref
        in: path
        description: The digest of the manifest
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AddLabel'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      x-codegen-request-body-name: body
    x-name: endpoints.api.manifest.RepositoryManifestLabels
    x-path: /api/v1/repository/{repository}/manifest/{manifestref}/labels
    x-tag: manifest
  /api/v1/repository/{repository}/manifest/{manifestref}:
    get:
      tags:
      - manifest
      operationId: getRepoManifest
      parameters:
      - name: manifestref
        in: path
        description: The digest of the manifest
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    x-name: endpoints.api.manifest.RepositoryManifest
    x-tag: manifest
    x-path: /api/v1/repository/{repository}/manifest/{manifestref}
  /api/v1/repository/{repository}/mirror:
    get:
      tags:
      - mirror
      description: Return the Mirror configuration for a given Repository.
      operationId: getRepoMirrorConfig
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ViewMirrorConfig'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    put:
      tags:
      - mirror
      description: Allow users to modifying the repository's mirroring configuration.
      operationId: changeRepoMirrorConfig
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateMirrorConfig'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    post:
      tags:
      - mirror
      description: Create a RepoMirrorConfig for a given Repository.
      operationId: createRepoMirrorConfig
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateMirrorConfig'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.mirror.RepoMirrorResource
    x-path: /api/v1/repository/{repository}/mirror
    x-tag: mirror
  /api/v1/repository/{repository}/mirror/sync-now:
    post:
      tags:
      - mirror
      description: Update the sync_status for a given Repository's mirroring configuration.
      operationId: syncNow
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.mirror.RepoMirrorSyncNowResource
    x-tag: mirror
    x-path: /api/v1/repository/{repository}/mirror/sync-now
  /api/v1/repository/{repository}/mirror/sync-cancel:
    post:
      tags:
      - mirror
      description: Update the sync_status for a given Repository's mirroring configuration.
      operationId: syncCancel
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.mirror.RepoMirrorSyncCancelResource
    x-tag: mirror
    x-path: /api/v1/repository/{repository}/mirror/sync-cancel
  /api/v1/organization/{orgname}/applications:
    get:
      tags:
      - organization
      description: List the applications for the specified organization.
      operationId: getOrganizationApplications
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    post:
      tags:
      - organization
      description: Creates a new application under this organization.
      operationId: createOrganizationApplication
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewApp'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.organization.OrganizationApplications
    x-path: /api/v1/organization/{orgname}/applications
    x-tag: organization
  /api/v1/app/{client_id}:
    get:
      tags:
      - organization
      description: Get information on the specified application.
      operationId: getApplicationInformation
      parameters:
      - name: client_id
        in: path
        description: The OAuth client ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
    x-name: endpoints.api.organization.ApplicationInformation
    x-tag: organization
    x-path: /api/v1/app/{client_id}
  /api/v1/organization/{orgname}/applications/{client_id}:
    get:
      tags:
      - organization
      description: Retrieves the application with the specified client_id under the
        specified organization.
      operationId: getOrganizationApplication
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: client_id
        in: path
        description: The OAuth client ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    put:
      tags:
      - organization
      description: Updates an application under this organization.
      operationId: updateOrganizationApplication
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: client_id
        in: path
        description: The OAuth client ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateApp'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - organization
      description: Deletes the application under this organization.
      operationId: deleteOrganizationApplication
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: client_id
        in: path
        description: The OAuth client ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.organization.OrganizationApplicationResource
    x-path: /api/v1/organization/{orgname}/applications/{client_id}
    x-tag: organization
  /api/v1/organization/{orgname}/collaborators:
    get:
      tags:
      - organization
      description: List outside collaborators of the specified organization.
      operationId: getOrganizationCollaborators
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.organization.OrganizationCollaboratorList
    x-tag: organization
    x-path: /api/v1/organization/{orgname}/collaborators
  /api/v1/organization/{orgname}/members/{membername}:
    get:
      tags:
      - organization
      description: Retrieves the details of a member of the organization.
      operationId: getOrganizationMember
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: membername
        in: path
        description: The username of the organization member
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    delete:
      tags:
      - organization
      description: |-
        Removes a member from an organization, revoking all its repository priviledges and removing
                it from all teams in the organization.
      operationId: removeOrganizationMember
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: membername
        in: path
        description: The username of the organization member
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.organization.OrganizationMember
    x-path: /api/v1/organization/{orgname}/members/{membername}
    x-tag: organization
  /api/v1/organization/{orgname}:
    get:
      tags:
      - organization
      description: Get the details for the specified organization.
      operationId: getOrganization
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
    put:
      tags:
      - organization
      description: Change the details for the specified organization.
      operationId: changeOrganizationDetails
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateOrg'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - organization
      description: Deletes the specified organization.
      operationId: deleteAdminedOrganization
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.organization.Organization
    x-path: /api/v1/organization/{orgname}
    x-tag: organization
  /api/v1/organization/{orgname}/members:
    get:
      tags:
      - organization
      description: List the human members of the specified organization.
      operationId: getOrganizationMembers
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.organization.OrganizationMemberList
    x-tag: organization
    x-path: /api/v1/organization/{orgname}/members
  /api/v1/organization/:
    post:
      tags:
      - organization
      description: Create a new organization.
      operationId: createOrganization
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewOrg'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.organization.OrganizationList
    x-tag: organization
    x-path: /api/v1/organization/
  /api/v1/repository/{repository}/permissions/team/:
    get:
      tags:
      - permission
      description: List all team permission.
      operationId: listRepoTeamPermissions
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.permission.RepositoryTeamPermissionList
    x-tag: permission
    x-path: /api/v1/repository/{repository}/permissions/team/
  /api/v1/repository/{repository}/permissions/team/{teamname}:
    get:
      tags:
      - permission
      description: Fetch the permission for the specified team.
      operationId: getTeamPermissions
      parameters:
      - name: teamname
        in: path
        description: The name of the team to which the permission applies
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    put:
      tags:
      - permission
      description: Update the existing team permission.
      operationId: changeTeamPermissions
      parameters:
      - name: teamname
        in: path
        description: The name of the team to which the permission applies
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TeamPermission'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - permission
      description: Delete the permission for the specified team.
      operationId: deleteTeamPermissions
      parameters:
      - name: teamname
        in: path
        description: The name of the team to which the permission applies
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.permission.RepositoryTeamPermission
    x-path: /api/v1/repository/{repository}/permissions/team/{teamname}
    x-tag: permission
  /api/v1/repository/{repository}/permissions/user/:
    get:
      tags:
      - permission
      description: List all user permissions.
      operationId: listRepoUserPermissions
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.permission.RepositoryUserPermissionList
    x-tag: permission
    x-path: /api/v1/repository/{repository}/permissions/user/
  /api/v1/repository/{repository}/permissions/user/{username}:
    get:
      tags:
      - permission
      description: Get the permission for the specified user.
      operationId: getUserPermissions
      parameters:
      - name: username
        in: path
        description: The username of the user to which the permission applies
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    put:
      tags:
      - permission
      description: Update the perimssions for an existing repository.
      operationId: changeUserPermissions
      parameters:
      - name: username
        in: path
        description: The username of the user to which the permission applies
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserPermission'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - permission
      description: Delete the permission for the user.
      operationId: deleteUserPermissions
      parameters:
      - name: username
        in: path
        description: The username of the user to which the permission applies
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.permission.RepositoryUserPermission
    x-path: /api/v1/repository/{repository}/permissions/user/{username}
    x-tag: permission
  /api/v1/repository/{repository}/permissions/user/{username}/transitive:
    get:
      tags:
      - permission
      description: Get the fetch the permission for the specified user.
      operationId: getUserTransitivePermission
      parameters:
      - name: username
        in: path
        description: The username of the user to which the permissions apply
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.permission.RepositoryUserTransitivePermission
    x-tag: permission
    x-path: /api/v1/repository/{repository}/permissions/user/{username}/transitive
  /api/v1/organization/{orgname}/prototypes/{prototypeid}:
    put:
      tags:
      - prototype
      description: Update the role of an existing permission prototype.
      operationId: updateOrganizationPrototypePermission
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: prototypeid
        in: path
        description: The ID of the prototype
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PrototypeUpdate'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - prototype
      description: Delete an existing permission prototype.
      operationId: deleteOrganizationPrototypePermission
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: prototypeid
        in: path
        description: The ID of the prototype
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.prototype.PermissionPrototype
    x-path: /api/v1/organization/{orgname}/prototypes/{prototypeid}
    x-tag: prototype
  /api/v1/organization/{orgname}/prototypes:
    get:
      tags:
      - prototype
      description: List the existing prototypes for this organization.
      operationId: getOrganizationPrototypePermissions
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    post:
      tags:
      - prototype
      description: Create a new permission prototype.
      operationId: createOrganizationPrototypePermission
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewPrototype'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.prototype.PermissionPrototypeList
    x-path: /api/v1/organization/{orgname}/prototypes
    x-tag: prototype
  /api/v1/repository:
    get:
      tags:
      - repository
      description: Fetch the list of repositories visible to the current user under
        a variety of situations.
      operationId: listRepos
      parameters:
      - name: next_page
        in: query
        description: The page token for the next page
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_kind
        in: query
        description: The kind of repositories to return
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: popularity
        in: query
        description: Whether to include the repository's popularity metric.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: last_modified
        in: query
        description: Whether to include when the repository was last modified.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: public
        in: query
        description: Adds any repositories visible to the user by virtue of being
          public
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: starred
        in: query
        description: Filters the repositories returned to those starred by the user
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: namespace
        in: query
        description: Filters the repositories returned to this namespace
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    post:
      tags:
      - repository
      description: Create a new repository.
      operationId: createRepo
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewRepo'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:create
      x-codegen-request-body-name: body
    x-name: endpoints.api.repository.RepositoryList
    x-tag: repository
    x-path: /api/v1/repository
  /api/v1/repository/{repository}/changetrust:
    x-name: endpoints.api.repository.RepositoryTrust
    x-tag: repository
    x-path: /api/v1/repository/{repository}/changetrust
  /api/v1/repository/{repository}:
    get:
      tags:
      - repository
      description: Fetch the specified repository.
      operationId: getRepo
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: includeTags
        in: query
        description: Whether to include repository tags
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: includeStats
        in: query
        description: Whether to include action statistics
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    put:
      tags:
      - repository
      description: Update the description in the specified repository.
      operationId: updateRepo
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RepoUpdate'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      x-codegen-request-body-name: body
    delete:
      tags:
      - repository
      description: Delete a repository.
      operationId: deleteRepository
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.repository.Repository
    x-path: /api/v1/repository/{repository}
    x-tag: repository
  /api/v1/repository/{repository}/changestate:
    put:
      tags:
      - repository
      description: Change the state of a repository.
      operationId: changeRepoState
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ChangeRepoState'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.repository.RepositoryStateResource
    x-tag: repository
    x-path: /api/v1/repository/{repository}/changestate
  /api/v1/repository/{repository}/changevisibility:
    post:
      tags:
      - repository
      description: Change the visibility of a repository.
      operationId: changeRepoVisibility
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ChangeVisibility'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.repository.RepositoryVisibility
    x-tag: repository
    x-path: /api/v1/repository/{repository}/changevisibility
  /api/v1/repository/{repository}/notification/:
    get:
      tags:
      - repositorynotification
      description: List the notifications for the specified repository.
      operationId: listRepoNotifications
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    post:
      tags:
      - repositorynotification
      operationId: createRepoNotification
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NotificationCreateRequest'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.repositorynotification.RepositoryNotificationList
    x-path: /api/v1/repository/{repository}/notification/
    x-tag: repositorynotification
  /api/v1/repository/{repository}/notification/{uuid}/test:
    post:
      tags:
      - repositorynotification
      description: Queues a test notification for this repository.
      operationId: testRepoNotification
      parameters:
      - name: uuid
        in: path
        description: The UUID of the notification
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.repositorynotification.TestRepositoryNotification
    x-tag: repositorynotification
    x-path: /api/v1/repository/{repository}/notification/{uuid}/test
  /api/v1/repository/{repository}/notification/{uuid}:
    get:
      tags:
      - repositorynotification
      description: Get information for the specified notification.
      operationId: getRepoNotification
      parameters:
      - name: uuid
        in: path
        description: The UUID of the notification
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    post:
      tags:
      - repositorynotification
      description: Resets repository notification to 0 failures.
      operationId: resetRepositoryNotificationFailures
      parameters:
      - name: uuid
        in: path
        description: The UUID of the notification
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    delete:
      tags:
      - repositorynotification
      description: Deletes the specified notification.
      operationId: deleteRepoNotification
      parameters:
      - name: uuid
        in: path
        description: The UUID of the notification
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.repositorynotification.RepositoryNotification
    x-path: /api/v1/repository/{repository}/notification/{uuid}
    x-tag: repositorynotification
  /api/v1/repository/{repository}/tokens/:
    get:
      tags:
      - repotoken
      description: List the tokens for the specified repository.
      operationId: listRepoTokens
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    post:
      tags:
      - repotoken
      description: Create a new repository token.
      operationId: createToken
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewToken'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.repotoken.RepositoryTokenList
    x-path: /api/v1/repository/{repository}/tokens/
    x-tag: repotoken
  /api/v1/repository/{repository}/tokens/{code}:
    get:
      tags:
      - repotoken
      description: Fetch the specified repository token information.
      operationId: getTokens
      parameters:
      - name: code
        in: path
        description: The token code
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    put:
      tags:
      - repotoken
      description: Update the permissions for the specified repository token.
      operationId: changeToken
      parameters:
      - name: code
        in: path
        description: The token code
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TokenPermission'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - repotoken
      description: Delete the repository token.
      operationId: deleteToken
      parameters:
      - name: code
        in: path
        description: The token code
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.repotoken.RepositoryToken
    x-path: /api/v1/repository/{repository}/tokens/{code}
    x-tag: repotoken
  /api/v1/user/robots:
    get:
      tags:
      - robot
      description: List the available robots for the user.
      operationId: getUserRobots
      parameters:
      - name: limit
        in: query
        description: If specified, the number of robots to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: token
        in: query
        description: If false, the robot's token is not returned.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: permissions
        in: query
        description: Whether to include repositories and teams in which the robots
          have permission.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    x-name: endpoints.api.robot.UserRobotList
    x-tag: robot
    x-path: /api/v1/user/robots
  /api/v1/organization/{orgname}/robots/{robot_shortname}/permissions:
    get:
      tags:
      - robot
      description: Returns the list of repository permissions for the org's robot.
      operationId: getOrgRobotPermissions
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: robot_shortname
        in: path
        description: The short name for the robot, without any user or organization
          prefix
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    x-name: endpoints.api.robot.OrgRobotPermissions
    x-tag: robot
    x-path: /api/v1/organization/{orgname}/robots/{robot_shortname}/permissions
  /api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate:
    post:
      tags:
      - robot
      description: Regenerates the token for an organization robot.
      operationId: regenerateOrgRobotToken
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: robot_shortname
        in: path
        description: The short name for the robot, without any user or organization
          prefix
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.robot.RegenerateOrgRobot
    x-tag: robot
    x-path: /api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate
  /api/v1/user/robots/{robot_shortname}/permissions:
    get:
      tags:
      - robot
      description: Returns the list of repository permissions for the user's robot.
      operationId: getUserRobotPermissions
      parameters:
      - name: robot_shortname
        in: path
        description: The short name for the robot, without any user or organization
          prefix
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    x-name: endpoints.api.robot.UserRobotPermissions
    x-tag: robot
    x-path: /api/v1/user/robots/{robot_shortname}/permissions
  /api/v1/organization/{orgname}/robots:
    get:
      tags:
      - robot
      description: List the organization's robots.
      operationId: getOrgRobots
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: If specified, the number of robots to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: token
        in: query
        description: If false, the robot's token is not returned.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: permissions
        in: query
        description: Whether to include repostories and teams in which the robots
          have permission.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.robot.OrgRobotList
    x-tag: robot
    x-path: /api/v1/organization/{orgname}/robots
  /api/v1/user/robots/{robot_shortname}/regenerate:
    post:
      tags:
      - robot
      description: Regenerates the token for a user's robot.
      operationId: regenerateUserRobotToken
      parameters:
      - name: robot_shortname
        in: path
        description: The short name for the robot, without any user or organization
          prefix
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    x-name: endpoints.api.robot.RegenerateUserRobot
    x-tag: robot
    x-path: /api/v1/user/robots/{robot_shortname}/regenerate
  /api/v1/organization/{orgname}/robots/{robot_shortname}:
    get:
      tags:
      - robot
      description: Returns the organization's robot with the specified name.
      operationId: getOrgRobot
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: robot_shortname
        in: path
        description: The short name for the robot, without any user or organization
          prefix
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    put:
      tags:
      - robot
      description: Create a new robot in the organization.
      operationId: createOrgRobot
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: robot_shortname
        in: path
        description: The short name for the robot, without any user or organization
          prefix
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateRobot'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - robot
      description: Delete an existing organization robot.
      operationId: deleteOrgRobot
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: robot_shortname
        in: path
        description: The short name for the robot, without any user or organization
          prefix
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.robot.OrgRobot
    x-path: /api/v1/organization/{orgname}/robots/{robot_shortname}
    x-tag: robot
  /api/v1/user/robots/{robot_shortname}:
    get:
      tags:
      - robot
      description: Returns the user's robot with the specified name.
      operationId: getUserRobot
      parameters:
      - name: robot_shortname
        in: path
        description: The short name for the robot, without any user or organization
          prefix
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    put:
      tags:
      - robot
      description: Create a new user robot with the specified name.
      operationId: createUserRobot
      parameters:
      - name: robot_shortname
        in: path
        description: The short name for the robot, without any user or organization
          prefix
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateRobot'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - robot
      description: Delete an existing robot.
      operationId: deleteUserRobot
      parameters:
      - name: robot_shortname
        in: path
        description: The short name for the robot, without any user or organization
          prefix
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    x-name: endpoints.api.robot.UserRobot
    x-path: /api/v1/user/robots/{robot_shortname}
    x-tag: robot
  /api/v1/entities/{prefix}:
    get:
      tags:
      - search
      description: Get a list of entities that match the specified prefix.
      operationId: getMatchingEntities
      parameters:
      - name: prefix
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: includeOrgs
        in: query
        description: Whether to include orgs names.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: includeTeams
        in: query
        description: Whether to include team names.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: namespace
        in: query
        description: Namespace to use when querying for org entities.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
    x-name: endpoints.api.search.EntitySearch
    x-tag: search
    x-path: /api/v1/entities/{prefix}
  /api/v1/find/all:
    get:
      tags:
      - search
      description: Get a list of entities and resources that match the specified query.
      operationId: conductSearch
      parameters:
      - name: query
        in: query
        description: The search query.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    x-name: endpoints.api.search.ConductSearch
    x-tag: search
    x-path: /api/v1/find/all
  /api/v1/find/repositories:
    get:
      tags:
      - search
      description: Get a list of apps and repositories that match the specified query.
      operationId: conductRepoSearch
      parameters:
      - name: page
        in: query
        description: The page.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: query
        in: query
        description: The search query.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
    x-name: endpoints.api.search.ConductRepositorySearch
    x-tag: search
    x-path: /api/v1/find/repositories
  /api/v1/repository/{repository}/image/{imageid}/security:
    get:
      tags:
      - secscan
      description: Fetches the features and vulnerabilities (if any) for a repository
        image.
      operationId: getRepoImageSecurity
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: imageid
        in: path
        description: The image ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: vulnerabilities
        in: query
        description: Include vulnerabilities information
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    x-name: endpoints.api.secscan.RepositoryImageSecurity
    x-tag: secscan
    x-path: /api/v1/repository/{repository}/image/{imageid}/security
  /api/v1/repository/{repository}/manifest/{manifestref}/security:
    get:
      tags:
      - secscan
      operationId: getRepoManifestSecurity
      parameters:
      - name: manifestref
        in: path
        description: The digest of the manifest
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: vulnerabilities
        in: query
        description: Include vulnerabilities informations
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    x-name: endpoints.api.secscan.RepositoryManifestSecurity
    x-tag: secscan
    x-path: /api/v1/repository/{repository}/manifest/{manifestref}/security
  /api/v1/superuser/{build_uuid}/logs:
    get:
      tags:
      - superuser
      description: Return the build logs for the build specified by the build uuid.
      operationId: getRepoBuildLogsSuperUser
      parameters:
      - name: build_uuid
        in: path
        description: The UUID of the build
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
    x-name: endpoints.api.superuser.SuperUserRepositoryBuildLogs
    x-tag: superuser
    x-path: /api/v1/superuser/{build_uuid}/logs
  /api/v1/superuser/{build_uuid}/build:
    get:
      tags:
      - superuser
      description: Returns information about a build.
      operationId: getRepoBuildSuperUser
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: build_uuid
        in: path
        description: The UUID of the build
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
    x-name: endpoints.api.superuser.SuperUserRepositoryBuildResource
    x-tag: superuser
    x-path: /api/v1/superuser/{build_uuid}/build
  /api/v1/superuser/keys:
    get:
      tags:
      - superuser
      operationId: listServiceKeys
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
    post:
      tags:
      - superuser
      operationId: createServiceKey
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateServiceKey'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
      x-codegen-request-body-name: body
    x-name: endpoints.api.superuser.SuperUserServiceKeyManagement
    x-tag: superuser
    x-path: /api/v1/superuser/keys
  /api/v1/superuser/{build_uuid}/status:
    get:
      tags:
      - superuser
      description: Return the status for the builds specified by the build uuids.
      operationId: getRepoBuildStatusSuperUser
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: build_uuid
        in: path
        description: The UUID of the build
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
    x-name: endpoints.api.superuser.SuperUserRepositoryBuildStatus
    x-tag: superuser
    x-path: /api/v1/superuser/{build_uuid}/status
  /api/v1/superuser/organizations/{name}:
    put:
      tags:
      - superuser
      description: Updates information about the specified user.
      operationId: changeOrganization
      parameters:
      - name: name
        in: path
        description: The name of the organizaton being managed
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateOrg'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
      x-codegen-request-body-name: body
    delete:
      tags:
      - superuser
      description: Deletes the specified organization.
      operationId: deleteOrganization
      parameters:
      - name: name
        in: path
        description: The name of the organizaton being managed
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
    x-name: endpoints.api.superuser.SuperUserOrganizationManagement
    x-path: /api/v1/superuser/organizations/{name}
    x-tag: superuser
  /api/v1/superuser/users/:
    get:
      tags:
      - superuser
      description: Returns a list of all users in the system.
      operationId: listAllUsers
      parameters:
      - name: disabled
        in: query
        description: If false, only enabled users will be returned.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
    post:
      tags:
      - superuser
      description: Creates a new user.
      operationId: createInstallUser
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateInstallUser'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
      x-codegen-request-body-name: body
    x-name: endpoints.api.superuser.SuperUserList
    x-tag: superuser
    x-path: /api/v1/superuser/users/
  /api/v1/superuser/approvedkeys/{kid}:
    post:
      tags:
      - superuser
      operationId: approveServiceKey
      parameters:
      - name: kid
        in: path
        description: The unique identifier for a service key
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ApproveServiceKey'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
      x-codegen-request-body-name: body
    x-name: endpoints.api.superuser.SuperUserServiceKeyApproval
    x-tag: superuser
    x-path: /api/v1/superuser/approvedkeys/{kid}
  /api/v1/superuser/keys/{kid}:
    get:
      tags:
      - superuser
      operationId: getServiceKey
      parameters:
      - name: kid
        in: path
        description: The unique identifier for a service key
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
    put:
      tags:
      - superuser
      operationId: updateServiceKey
      parameters:
      - name: kid
        in: path
        description: The unique identifier for a service key
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PutServiceKey'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
      x-codegen-request-body-name: body
    delete:
      tags:
      - superuser
      operationId: deleteServiceKey
      parameters:
      - name: kid
        in: path
        description: The unique identifier for a service key
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - super:user
    x-name: endpoints.api.superuser.SuperUserServiceKey
    x-path: /api/v1/superuser/keys/{kid}
    x-tag: superuser
  /api/v1/repository/{repository}/tag/{tag}/images:
    get:
      tags:
      - tag
      description: List the images for the specified repository tag.
      operationId: listTagImages
      parameters:
      - name: tag
        in: path
        description: The name of the tag
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: owned
        in: query
        description: If specified, only images wholely owned by this tag are returned.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    x-name: endpoints.api.tag.RepositoryTagImages
    x-tag: tag
    x-path: /api/v1/repository/{repository}/tag/{tag}/images
  /api/v1/repository/{repository}/tag/{tag}/restore:
    post:
      tags:
      - tag
      description: Restores a repository tag back to a previous image in the repository.
      operationId: restoreTag
      parameters:
      - name: tag
        in: path
        description: The name of the tag
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RestoreTag'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      x-codegen-request-body-name: body
    x-name: endpoints.api.tag.RestoreTag
    x-tag: tag
    x-path: /api/v1/repository/{repository}/tag/{tag}/restore
  /api/v1/repository/{repository}/tag/:
    get:
      tags:
      - tag
      operationId: listRepoTags
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: onlyActiveTags
        in: query
        description: Filter to only active tags.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: page
        in: query
        description: Page index for the results. Default 1.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: limit
        in: query
        description: Limit to the number of results to return per page. Max 100.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: specificTag
        in: query
        description: Filters the tags to the specific tag.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
    x-name: endpoints.api.tag.ListRepositoryTags
    x-tag: tag
    x-path: /api/v1/repository/{repository}/tag/
  /api/v1/repository/{repository}/tag/{tag}:
    put:
      tags:
      - tag
      description: Change which image a tag points to or create a new tag.
      operationId: changeTag
      parameters:
      - name: tag
        in: path
        description: The name of the tag
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ChangeTag'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      x-codegen-request-body-name: body
    delete:
      tags:
      - tag
      description: Delete the specified repository tag.
      operationId: deleteFullTag
      parameters:
      - name: tag
        in: path
        description: The name of the tag
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
    x-name: endpoints.api.tag.RepositoryTag
    x-path: /api/v1/repository/{repository}/tag/{tag}
    x-tag: tag
  /api/v1/organization/{orgname}/team/{teamname}/members:
    get:
      tags:
      - team
      description: Retrieve the list of members for the specified team.
      operationId: getOrganizationTeamMembers
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: teamname
        in: path
        description: The name of the team
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: includePending
        in: query
        description: Whether to include pending members
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.team.TeamMemberList
    x-tag: team
    x-path: /api/v1/organization/{orgname}/team/{teamname}/members
  /api/v1/organization/{orgname}/team/{teamname}:
    put:
      tags:
      - team
      description: Update the org-wide permission for the specified team.
      operationId: updateOrganizationTeam
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: teamname
        in: path
        description: The name of the team
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TeamDescription'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - team
      description: Delete the specified team.
      operationId: deleteOrganizationTeam
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: teamname
        in: path
        description: The name of the team
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.team.OrganizationTeam
    x-path: /api/v1/organization/{orgname}/team/{teamname}
    x-tag: team
  /api/v1/organization/{orgname}/team/{teamname}/members/{membername}:
    put:
      tags:
      - team
      description: Adds or invites a member to an existing team.
      operationId: updateOrganizationTeamMember
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: membername
        in: path
        description: The username of the team member
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: teamname
        in: path
        description: The name of the team
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    delete:
      tags:
      - team
      description: |-
        Delete a member of a team.

                If the user is merely invited to join the team, then the invite is removed instead.
      operationId: deleteOrganizationTeamMember
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: membername
        in: path
        description: The username of the team member
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: teamname
        in: path
        description: The name of the team
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.team.TeamMember
    x-path: /api/v1/organization/{orgname}/team/{teamname}/members/{membername}
    x-tag: team
  /api/v1/organization/{orgname}/team/{teamname}/permissions:
    get:
      tags:
      - team
      description: Returns the list of repository permissions for the org's team.
      operationId: getOrganizationTeamPermissions
      parameters:
      - name: orgname
        in: path
        description: The name of the organization
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: teamname
        in: path
        description: The name of the team
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
    x-name: endpoints.api.team.TeamPermissions
    x-tag: team
    x-path: /api/v1/organization/{orgname}/team/{teamname}/permissions
  /api/v1/organization/{orgname}/team/{teamname}/invite/{email}:
    put:
      tags:
      - team
      description: Invites an email address to an existing team.
      operationId: inviteTeamMemberEmail
      parameters:
      - name: orgname
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: email
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: teamname
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    delete:
      tags:
      - team
      description: Delete an invite of an email address to join a team.
      operationId: deleteTeamMemberEmailInvite
      parameters:
      - name: orgname
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: email
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: teamname
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
    x-name: endpoints.api.team.InviteTeamMember
    x-tag: team
    x-path: /api/v1/organization/{orgname}/team/{teamname}/invite/{email}
  /api/v1/repository/{repository}/trigger/{trigger_uuid}:
    get:
      tags:
      - trigger
      description: Get information for the specified build trigger.
      operationId: getBuildTrigger
      parameters:
      - name: trigger_uuid
        in: path
        description: The UUID of the build trigger
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    put:
      tags:
      - trigger
      description: Updates the specified build trigger.
      operationId: updateBuildTrigger
      parameters:
      - name: trigger_uuid
        in: path
        description: The UUID of the build trigger
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateTrigger'
        required: true
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - trigger
      description: Delete the specified build trigger.
      operationId: deleteBuildTrigger
      parameters:
      - name: trigger_uuid
        in: path
        description: The UUID of the build trigger
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.trigger.BuildTrigger
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}
    x-tag: trigger
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/activate:
    post:
      tags:
      - trigger
      description: Activate the specified build trigger.
      operationId: activateBuildTrigger
      parameters:
      - name: trigger_uuid
        in: path
        description: The UUID of the build trigger
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BuildTriggerActivateRequest'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.trigger.BuildTriggerActivate
    x-tag: trigger
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/activate
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/builds:
    get:
      tags:
      - trigger
      description: List the builds started by the specified trigger.
      operationId: listTriggerRecentBuilds
      parameters:
      - name: trigger_uuid
        in: path
        description: The UUID of the build trigger
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of builds to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.trigger.TriggerBuildList
    x-tag: trigger
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/builds
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/start:
    post:
      tags:
      - trigger
      description: Manually start a build from the specified trigger.
      operationId: manuallyStartBuildTrigger
      parameters:
      - name: trigger_uuid
        in: path
        description: The UUID of the build trigger
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RunParameters'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      x-codegen-request-body-name: body
    x-name: endpoints.api.trigger.ActivateBuildTrigger
    x-tag: trigger
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/start
  /api/v1/repository/{repository}/trigger/:
    get:
      tags:
      - trigger
      description: List the triggers for the specified repository.
      operationId: listBuildTriggers
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
    x-name: endpoints.api.trigger.BuildTriggerList
    x-tag: trigger
    x-path: /api/v1/repository/{repository}/trigger/
  /api/v1/users/{username}:
    get:
      tags:
      - user
      description: Get user information for the specified user.
      operationId: getUserInformation
      parameters:
      - name: username
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
    x-name: endpoints.api.user.Users
    x-tag: user
    x-path: /api/v1/users/{username}
  /api/v1/user/starred:
    get:
      tags:
      - user
      description: List all starred repositories.
      operationId: listStarredRepos
      parameters:
      - name: next_page
        in: query
        description: The page token for the next page
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful invocation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    post:
      tags:
      - user
      description: Star a repository.
      operationId: createStar
      requestBody:
        description: Request body contents.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewStarredRepository'
        required: true
      responses:
        "201":
          description: Successful creation
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      x-codegen-request-body-name: body
    x-name: endpoints.api.user.StarredRepositoryList
    x-tag: user
    x-path: /api/v1/user/starred
  /api/v1/user/:
    get:
      tags:
      - user
      description: Get user information for the authenticated user.
      operationId: getLoggedInUser
      responses:
        "200":
          description: Successful invocation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserView'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:read
    x-name: endpoints.api.user.User
    x-tag: user
    x-path: /api/v1/user/
  /api/v1/user/starred/{repository}:
    delete:
      tags:
      - user
      description: Removes a star from a repository.
      operationId: deleteStar
      parameters:
      - name: repository
        in: path
        description: The full path of the repository. e.g. namespace/name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
          content: {}
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "401":
          description: Session required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: Unauthorized access
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
    x-name: endpoints.api.user.StarredRepository
    x-tag: user
    x-path: /api/v1/user/starred/{repository}
  /userfiles/{file_id}:
    x-name: data.userfiles.UserfilesHandlers
    x-tag: userfiles
    x-path: /userfiles/{file_id}
components:
  schemas:
    ChangeTag:
      type: object
      description: Makes changes to a specific tag
    RepositoryBuildRequest:
      type: object
      properties:
        subdirectory:
          type: string
          description: Subdirectory in which the Dockerfile can be found. You can
            only specify this or dockerfile_path
        archive_url:
          type: string
          description: The URL of the .tar.gz to build. Must start with "http" or
            "https".
        docker_tags:
          minItems: 1
          uniqueItems: true
          type: array
          description: The tags to which the built images will be pushed. If none
            specified, "latest" is used.
          items:
            type: string
        pull_robot:
          type: string
          description: Username of a Quay robot account to use as pull credentials
        file_id:
          type: string
          description: The file id that was generated when the build spec was uploaded
        context:
          type: string
          description: Pass in the context for the dockerfile. This is optional.
        dockerfile_path:
          type: string
          description: Path to a dockerfile. You can only specify this or subdirectory.
      description: Description of a new repository build.
    CreateServiceKey:
      required:
      - expiration
      - service
      type: object
      properties:
        notes:
          type: string
          description: If specified, the extra notes for the key
        expiration:
          type: object
          description: The expiration date as a unix timestamp
        name:
          type: string
          description: The friendly name of a service key
        service:
          type: string
          description: The service authenticating with this key
        metadata:
          type: object
          properties: {}
          description: The key/value pairs of this key's metadata
      description: Description of creation of a service key
    NewToken:
      required:
      - friendlyName
      type: object
      properties:
        friendlyName:
          type: string
          description: Friendly name to help identify the token
      description: Description of a new token.
    UserPermission:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          description: Role to use for the user
          enum:
          - read
          - write
          - admin
      description: Description of a user permission.
    NewStarredRepository:
      required:
      - namespace
      - repository
      type: object
      properties:
        namespace:
          type: string
          description: Namespace in which the repository belongs
        repository:
          type: string
          description: Repository name
    UpdateMirrorConfig:
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Used to enable or disable synchronizations.
        external_registry_config:
          $ref: '#/components/schemas/UpdateMirrorConfig_external_registry_config'
        sync_start_date:
          type: string
          description: Determines the next time this repository is ready for synchronization.
        external_reference:
          type: string
          description: Location of the external repository.
        root_rule:
          $ref: '#/components/schemas/UpdateMirrorConfig_root_rule'
        sync_interval:
          minimum: 0
          type: integer
          description: Number of seconds after next_start_date to begin synchronizing.
        robot_username:
          type: string
          description: Username of robot which will be used for image pushes.
      description: Update the repository mirroring configuration.
    PutServiceKey:
      type: object
      properties:
        expiration:
          type: object
          description: The expiration date as a unix timestamp
        name:
          type: string
          description: The friendly name of a service key
        metadata:
          type: object
          properties: {}
          description: The key/value pairs of this key's metadata
      description: Description of updates for a service key
    CreateRobot:
      type: object
      properties:
        unstructured_metadata:
          type: object
          properties: {}
          description: Optional unstructured metadata for the robot
        description:
          maxLength: 255
          type: string
          description: Optional text description for the robot
      description: Optional data for creating a robot
    UpdateUser:
      type: object
      properties:
        username:
          type: string
          description: The user's username
        invoice_email:
          type: boolean
          description: Whether the user desires to receive an invoice email.
        password:
          type: string
          description: The user's password
        email:
          type: string
          description: The user's email address
        tag_expiration_s:
          minimum: 0
          type: integer
          description: The number of seconds for tag expiration
      description: Fields which can be updated in a user.
    ApproveServiceKey:
      type: object
      properties:
        notes:
          type: string
          description: Optional approval notes
      description: Information for approving service keys
    BuildTriggerActivateRequest:
      required:
      - config
      type: object
      properties:
        pull_robot:
          type: string
          description: The name of the robot that will be used to pull images.
        config:
          type: object
          properties: {}
          description: Arbitrary json.
    UpdateApp:
      required:
      - application_uri
      - name
      - redirect_uri
      type: object
      properties:
        redirect_uri:
          type: string
          description: The URI for the application's OAuth redirect
        avatar_email:
          type: string
          description: The e-mail address of the avatar to use for the application
        name:
          type: string
          description: The name of the application
        application_uri:
          type: string
          description: The URI for the application's homepage
        description:
          type: string
          description: The human-readable description for the application
      description: Description of an updated application.
    ChangeVisibility:
      required:
      - visibility
      type: object
      properties:
        visibility:
          type: string
          description: Visibility which the repository will start with
          enum:
          - public
          - private
      description: Change the visibility for the repository.
    TeamDescription:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          description: Org wide permissions that should apply to the team
          enum:
          - member
          - creator
          - admin
        description:
          type: string
          description: Markdown description for the team
      description: Description of a team
    NewOrg:
      required:
      - name
      type: object
      properties:
        recaptcha_response:
          type: string
          description: The (may be disabled) recaptcha response code for verification
        name:
          type: string
          description: Organization username
        email:
          type: string
          description: Organization contact email
      description: Description of a new organization.
    ExportLogs:
      type: object
      properties:
        callback_email:
          type: string
          description: The e-mail address at which to e-mail a link to the exported
            logs
        callback_url:
          type: string
          description: The callback URL to invoke with a link to the exported logs
      description: Configuration for an export logs operation
    NewPrototype:
      required:
      - delegate
      - role
      type: object
      properties:
        activating_user:
          $ref: '#/components/schemas/NewPrototype_activating_user'
        role:
          type: string
          description: Role that should be applied to the delegate
          enum:
          - read
          - write
          - admin
        delegate:
          $ref: '#/components/schemas/NewPrototype_delegate'
      description: Description of a new prototype
    TokenPermission:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          description: Role to use for the token
          enum:
          - read
          - write
          - admin
      description: Description of a token permission
    ChangeRepoState:
      required:
      - state
      type: object
      properties:
        state:
          type: string
          description: Determines whether pushes are allowed.
          enum:
          - NORMAL
          - READ_ONLY
          - MIRROR
      description: Change the state of the repository.
    RunParameters:
      type: object
      properties:
        branch_name:
          type: string
          description: (SCM only) If specified, the name of the branch to build.
        commit_sha:
          type: string
          description: (Custom Only) If specified, the ref/SHA1 used to checkout a
            git repository.
      description: Optional run parameters for activating the build trigger
    RepoUpdate:
      required:
      - description
      type: object
      properties:
        description:
          type: string
          description: Markdown encoded description for the repository
      description: Fields which can be updated in a repository.
    NewRepo:
      required:
      - description
      - repository
      - visibility
      type: object
      properties:
        namespace:
          type: string
          description: Namespace in which the repository should be created. If omitted,
            the username of the caller is used
        visibility:
          type: string
          description: Visibility which the repository will start with
          enum:
          - public
          - private
        repository:
          type: string
          description: Repository name
        description:
          type: string
          description: Markdown encoded description for the repository
      description: Description of a new repository
    CreateMirrorConfig:
      required:
      - external_reference
      - root_rule
      - sync_interval
      - sync_start_date
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Used to enable or disable synchronizations.
        external_registry_config:
          $ref: '#/components/schemas/UpdateMirrorConfig_external_registry_config'
        sync_start_date:
          type: string
          description: Determines the next time this repository is ready for synchronization.
        external_reference:
          type: string
          description: Location of the external repository.
        root_rule:
          $ref: '#/components/schemas/UpdateMirrorConfig_root_rule'
        sync_interval:
          minimum: 0
          type: integer
          description: Number of seconds after next_start_date to begin synchronizing.
        robot_username:
          type: string
          description: Username of robot which will be used for image pushes.
      description: Create the repository mirroring configuration.
    ApiError:
      required:
      - status
      - title
      - type
      type: object
      properties:
        status:
          type: integer
          description: Status code of the response.
        error_message:
          type: string
          description: Deprecated; alias for detail
        title:
          type: string
          description: Unique error code to identify the type of error.
        error_type:
          type: string
          description: Deprecated; alias for detail
        detail:
          type: string
          description: Details about the specific instance of the error.
        type:
          type: string
          description: Reference to the type of the error.
    CreateMessage:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/CreateMessage_message'
      description: Create a new message
    UpdateTrigger:
      required:
      - enabled
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether the build trigger is enabled
      description: Options for updating a build trigger
    RestoreTag:
      type: object
      properties:
        image:
          type: string
          description: '(Deprecated: use `manifest_digest`) Image to which the tag
            should point'
        manifest_digest:
          type: string
          description: If specified, the manifest digest that should be used
      description: Restores a tag to a specific image
    ApiErrorDescription:
      required:
      - description
      - title
      - type
      type: object
      properties:
        type:
          type: string
          description: A reference to the error type resource
        description:
          type: string
          description: A more detailed description of the error that may include help
            for fixing the issue.
        title:
          type: string
          description: The title of the error. Can be used to uniquely identify the
            kind of error.
          enum:
          - downstream_issue
          - exceeds_license
          - expired_token
          - external_service_timeout
          - fresh_login_required
          - insufficient_scope
          - invalid_request
          - invalid_response
          - invalid_token
          - not_found
      description: Description of an error
      example:
        description: description
        type: type
        title: downstream_issue
    UserView:
      required:
      - anonymous
      - avatar
      type: object
      properties:
        organizations:
          type: array
          description: Information about the organizations in which the user is a
            member
          items:
            type: object
            properties: {}
            example: {}
        verified:
          type: boolean
          description: Whether the user's email address has been verified
        avatar:
          type: object
          properties: {}
          description: Avatar data representing the user's icon
          example: {}
        anonymous:
          type: boolean
          description: true if this user data represents a guest user
        logins:
          type: array
          description: The list of external login providers against which the user
            has authenticated
          items:
            type: object
            properties: {}
            example: {}
        can_create_repo:
          type: boolean
          description: Whether the user has permission to create repositories
        preferred_namespace:
          type: boolean
          description: If true, the user's namespace is the preferred namespace to
            display
        email:
          type: string
          description: The user's email address
      description: Describes a user
      example:
        can_create_repo: true
        organizations:
        - {}
        - {}
        verified: true
        anonymous: true
        avatar: {}
        logins:
        - {}
        - {}
        email: email
        preferred_namespace: true
    NewApp:
      required:
      - name
      type: object
      properties:
        redirect_uri:
          type: string
          description: The URI for the application's OAuth redirect
        avatar_email:
          type: string
          description: The e-mail address of the avatar to use for the application
        name:
          type: string
          description: The name of the application
        application_uri:
          type: string
          description: The URI for the application's homepage
        description:
          type: string
          description: The human-readable description for the application
      description: Description of a new organization application.
    UpdateOrg:
      type: object
      properties:
        invoice_email:
          type: boolean
          description: Whether the organization desires to receive emails for invoices
        email:
          type: string
          description: Organization contact email
        tag_expiration_s:
          minimum: 0
          type: integer
          description: The number of seconds for tag expiration
      description: Description of updates for an existing organization
    NotificationCreateRequest:
      required:
      - config
      - event
      - eventConfig
      - method
      type: object
      properties:
        eventConfig:
          type: object
          properties: {}
          description: JSON config information for the specific event of notification
        title:
          type: string
          description: The human-readable title of the notification
        config:
          type: object
          properties: {}
          description: JSON config information for the specific method of notification
        event:
          type: string
          description: The event on which the notification will respond
        method:
          type: string
          description: The method of notification (such as email or web callback)
      description: Information for creating a notification on a repository
    NewUser:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
          description: The user's username
        password:
          type: string
          description: The user's password
        email:
          type: string
          description: The user's email address
        invite_code:
          type: string
          description: The optional invite code
        recaptcha_response:
          type: string
          description: The (may be disabled) recaptcha response code for verification
      description: Fields which must be specified for a new user.
    AddLabel:
      required:
      - key
      - value
      type: object
      properties:
        value:
          type: string
          description: The value for the label
        key:
          type: string
          description: The key for the label
      description: Adds a label to a manifest
    CreateInstallUser:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: The username of the user being created
        email:
          type: string
          description: The email address of the user being created
      description: Data for creating a user
    ViewMirrorConfig:
      required:
      - external_reference
      - external_registry_config
      - is_enabled
      - robot_username
      - root_rule
      - sync_interval
      - sync_start_date
      type: object
      properties:
        is_enabled:
          type: boolean
          description: Used to enable or disable synchronizations.
        external_registry_config:
          $ref: '#/components/schemas/UpdateMirrorConfig_external_registry_config'
        sync_start_date:
          type: string
          description: Determines the next time this repository is ready for synchronization.
        external_reference:
          type: string
          description: Location of the external repository.
        root_rule:
          $ref: '#/components/schemas/UpdateMirrorConfig_root_rule'
        sync_interval:
          minimum: 0
          type: integer
          description: Number of seconds after next_start_date to begin synchronizing.
        robot_username:
          type: string
          description: Username of robot which will be used for image pushes.
      description: View the repository mirroring configuration.
      example:
        is_enabled: true
        sync_start_date: sync_start_date
        external_reference: external_reference
        sync_interval: 0
        root_rule:
          rule_value:
          - rule_value
          - rule_value
          rule_kind: tag_glob_csv
        external_registry_config:
          proxy: {}
          verify_tls: true
        robot_username: robot_username
    PrototypeUpdate:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          description: Role that should be applied to the permission
          enum:
          - read
          - write
          - admin
      description: Description of a the new prototype role
    TeamPermission:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          description: Role to use for the team
          enum:
          - read
          - write
          - admin
      description: Description of a team permission.
    UpdateMirrorConfig_external_registry_config:
      type: object
      properties:
        proxy:
          type: object
          properties: {}
          description: Proxy configuration for use during synchronization.
          example: {}
        verify_tls:
          type: boolean
          description: Determines whether HTTPs is required and the certificate is
            verified when communicating with the external repository.
      example:
        proxy: {}
        verify_tls: true
    UpdateMirrorConfig_root_rule:
      required:
      - rule_kind
      - rule_value
      type: object
      properties:
        rule_kind:
          type: string
          description: The kind of rule type
          enum:
          - tag_glob_csv
        rule_value:
          type: array
          description: Array of tag patterns
          items:
            type: string
      description: A list of glob-patterns used to determine which tags should be
        synchronized.
      example:
        rule_value:
        - rule_value
        - rule_value
        rule_kind: tag_glob_csv
    NewPrototype_activating_user:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The username for the activating_user
      description: Repository creating user to whom the rule should apply
    NewPrototype_delegate:
      required:
      - kind
      - name
      type: object
      properties:
        kind:
          type: string
          description: Whether the delegate is a user or a team
          enum:
          - user
          - team
        name:
          type: string
          description: The name for the delegate team or user
      description: Information about the user or team to which the rule grants access
    CreateMessage_message:
      required:
      - content
      - media_type
      - severity
      type: object
      properties:
        content:
          type: string
          description: The actual message
        media_type:
          type: string
          description: The media type of the message
          enum:
          - text/plain
          - text/markdown
        severity:
          type: string
          description: The severity of the message
          enum:
          - info
          - warning
          - error
      description: A single message
  securitySchemes:
    oauth2_implicit:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost/oauth/authorize
          scopes:
            repo:write: This application will be able to view, push and pull to all
              repositories to which the granting user or robot account has write access
            repo:read: This application will be able to view and pull all repositories
              visible to the granting user or robot account
            repo:create: This application will be able to create repositories in to
              any namespaces that the granting user or robot account is allowed to
              create repositories
            super:user: This application will be able to administer your installation
              including managing users, managing organizations and other features
              found in the superuser panel. You should have absolute trust in the
              requesting application before granting this permission.
            repo:admin: This application will have administrator access to all repositories
              to which the granting user or robot account has access
            user:admin: This application will be able to administer your account including
              creating robots and granting them permissions to your repositories.
              You should have absolute trust in the requesting application before
              granting this permission.
            org:admin: This application will be able to administer your organizations
              including creating robots, creating teams, adjusting team membership,
              and changing billing settings. You should have absolute trust in the
              requesting application before granting this permission.
            user:read: This application will be able to read user information such
              as username and email address.
